@section('js_pos')
    <script type="text/babel">
        const ItemMenu = ({...props}) => {
            return (

                <li className="dd-item dd3-item"
                    data-id={props.value}
                    data-key={props.value}
                    data-title={props.title}
                    data-slug={props.slug}
                    data-type={props.type}>
                    <div className="dd3-content">
                        <i className="icon-menu dd-handle"/>
                        {props.title}
                        <a className="btn" onClick={() => props.removeItem(props)}><i className="icon-trash"/></a>
                    </div>
                    {
                        props.children ? props.children.map(item => {
                            return (
                                <ol className="dd-list">
                                    <ItemMenu removeItem={() => props.removeItem(item)} {...item}/>
                                </ol>
                            )
                        }) : null
                    }
                </li>
            )
        }
        const App = () => {
            const [state, setState] = useState({
                categories: [],
                items: [],
                outerLink: false,
                type: null,
                currentItem: {}
            });

            const [form] = Form.useForm();
            const onRemoveItem = item => {
                let items = state.items.filter(key => key.id !== item.id);
                setState({
                    ...state,
                    ...{
                        items
                    }
                })
            }
            const submitForm = async (data) => {
                let items = state.items;
                if (data.link === 'outer_link' || typeof data.link === 'string') {
                    let item = {
                        title: data.title,
                        key: data.key === 'outer_link' ? 'outer_link' : state.currentItem.key,
                        value: typeof data.outer_link ? data.outer_link : state.currentItem.link,
                        type: typeof state.currentItem.type === "undefined" ? 'custom' : state.currentItem.type,
                        slug: state.currentItem.slug
                    };
                    items.push(item);
                } else {
                    let item = await Archives.view(data.link);
                    items.push({
                        title: data.title,
                        key: item.id,
                        slug: item.slug,
                        value: item.id,
                        type: item.type
                    });
                }
                setState({
                    ...state,
                    ...{
                        items
                    }
                });
            }
            const changeLink = e => {
                if (typeof e == 'string') {
                    let itemKey = getObjectValue(e, customPages(state.categories));
                    let outerLink = false;
                    if (e === 'outer_link') {
                        outerLink = true;
                    }
                    setState({
                        ...state,
                        ...{
                            outerLink: outerLink,
                            currentItem: itemKey
                        }
                    });
                } else {
                    setState({
                        ...state,
                        ...{
                            outerLink: false,
                            currentItem: {}
                        }
                    });
                }
            }
            const saveMenu = async () => {
                let items = JSON.stringify($('#menu-sortable').nestable('serialize'));
                let language = form.getFieldValue('language'),
                    name = form.getFieldValue('name');
                try {
                    await Menu.save({items, language, name});
                    message.success('Lưu menu thành công!');
                } catch (e) {
                    message.error(e.message);
                }
            }
            const getMenu = async (name, lang) => {

                try {
                    const data = await Menu.get(name, lang);
                    setState({
                        items: data.items ? JSON.parse(data.items) : []
                    });
                    form.setFieldsValue({
                        language: data.language,
                        name: data.name
                    });
                    initSortable();
                } catch (e) {
                    console.warn(e);
                }
            }
            const onChangeMenu = async (e) => {
                const name = form.getFieldValue('name');
                const lang = form.getFieldValue('language');
                await getMenu(name, lang);
            }
            useEffect(async () => {
                const {data} = await Archives.fetch({page: -1});
                let categories = convertTreeSelect(data);
                categories = categories.concat(customPages(categories));
                setState({
                    ...state,
                    ...{
                        categories: categories,
                    }
                });
                await getMenu(form.getFieldValue('name'), form.getFieldValue('language'));
            }, []);
            return (
                <Form form={form} onFinish={submitForm} layout="vertical">
                    <Row gutter={[8, 0]}>
                        <Col md={8}>
                            <Card title="Thêm item menu" extra={
                                <Form.Item
                                    initialValue="header"
                                    style={getStyles({marginBottom: 0})}
                                    name="name">
                                    <Select onChange={onChangeMenu}>
                                        <Select.Option value={`header`}>Header</Select.Option>
                                        <Select.Option value={`footer`}>Footer</Select.Option>
                                    </Select>
                                </Form.Item>
                            }>
                                <Form.Item
                                    label="Tên hiển thị"
                                    name="title"
                                    rules={[{required: true, message: 'Nhập tên hiển thị'}]}
                                >
                                    <Input/>
                                </Form.Item>
                                <Form.Item
                                    initialValue={LANG_VI}
                                    label="Ngôn ngữ"
                                    name="language"
                                >
                                    <Select onChange={onChangeMenu} style={getStyles({width: '100%'})}>
                                        <Select.Option value={LANG_VI}>Tiếng Việt</Select.Option>
                                        <Select.Option value={LANG_EN}>Tiếng Anh</Select.Option>
                                    </Select>
                                </Form.Item>
                                <Form.Item
                                    hidden
                                    name="type"
                                >
                                    <Input/>
                                </Form.Item>
                                <Form.Item
                                    label="Đường dẫn"
                                    name="link"
                                    rules={[{required: true, message: 'Chọn đường dẫn'}]}
                                >
                                    <TreeSelect
                                        onChange={changeLink}
                                        showArrow={false}
                                        treeData={state.categories}
                                        style={styleTreeSelect}
                                        dropdownStyle={dropdownStyleTreeSelect}
                                        placeholder="Please select"
                                        treeDefaultExpandAll
                                    />
                                </Form.Item>
                                {state.outerLink ? <Form.Item
                                    initialValue="/"
                                    label="Link tùy chỉnh"
                                    name="outer_link"
                                    rules={[{required: true, message: 'Nhập đường dẫn'}]}
                                >
                                    <Input/>
                                </Form.Item> : null}

                                <div className="pull-right">
                                    <Button htmlType="submit" type="primary">
                                        Thêm menu
                                    </Button>
                                </div>
                            </Card>
                        </Col>
                        <Col md={16}>
                            <Card title="Menu list" extra={
                                <div className="d-flex justify-content-between">
                                    <Form.Item
                                        name="language"
                                    >
                                        <Select onChange={onChangeMenu} defaultValue={LANG_VI}
                                                style={getStyles({width: '100%'})}>
                                            <Select.Option value={LANG_VI}>Tiếng Việt</Select.Option>
                                            <Select.Option value={LANG_EN}>Tiếng Anh</Select.Option>
                                        </Select>
                                    </Form.Item>
                                    <Form.Item
                                        name={'name'}
                                    >
                                        <Select onChange={onChangeMenu} defaultValue={`header`}
                                                style={getStyles({width: '100%'})}>
                                            <Select.Option value={`header`}>Header</Select.Option>
                                            <Select.Option value={`footer`}>Footer</Select.Option>
                                        </Select>
                                    </Form.Item>
                                    <Button onClick={saveMenu} type="primary" htmlType="button"
                                            className="ml-2">Lưu</Button>
                                </div>
                            }>
                                <div id="menu-sortable" className="custom-dd dd">
                                    <ol className="dd-list">
                                        {state.items.length > 0 ?
                                            state.items.map(item => <ItemMenu removeItem={onRemoveItem} {...item}/>) :
                                            null
                                        }
                                    </ol>
                                </div>
                            </Card>
                        </Col>
                    </Row>
                </Form>
            )
        }
    </script>
@stop
